grammar org.agileware.natural.lang.Natural hidden(WS, SL_COMMENT)

import "http://www.eclipse.org/emf/2002/Ecore" as ecore
generate model "http://www.agileware.org/natural/lang"

/**
 * 
 */
NaturalModel: {NaturalModel}
	document=Document?
;

/**
 * 
 */
Document: {Document}
	BLANK_SPACE?
	(meta=Meta BLANK_SPACE?)?
	'Document:' title=RawText? NL
	(BLANK_SPACE? narrative=Narrative)?
	(BLANK_SPACE? sections+=Section)*
	BLANK_SPACE?
;

/**
 * 
 */
Section: {Section}
	(meta=Meta BLANK_SPACE?)?
	'Section:' title=RawText? NL
	(BLANK_SPACE? narrative=Narrative)?
;

/**
 * 
 */
Meta: {Meta}
	tags+=MetaElement
	(BLANK_SPACE? tags+=MetaElement)*
	NL
;

/**
 * 
 */
MetaElement: {MetaElement}
	id=TAG
	(':' value=RawText)?
;

/**
 * 
 */
Narrative: {Narrative}
	sections+=NarrativeSection
	(NL BLANK_SPACE? sections+=NarrativeSection)*
;

/**
 * 
 */
NarrativeSection:
	Paragraph
	| DocString
	| Table
;

/**
 * 
 */
Paragraph: {Paragraph}
	value=RawTextBlock
	NL
;

/**
 * 
 */
DocString: {DocString}
	value=DOC_STRING_LITERAL
	NL
;

terminal DOC_STRING_LITERAL:
	('"""'->'"""')
	| ("'''"->"'''")
;

/**
 * 
 */
Table: {Table}
	rows+=TableRow+
;

/**
 * 
 */
TableRow: {TableRow}
	cols+=TableCol+ '|' NL
;

/**
 * 
 */
TableCol: {TableCol}
	value=TABLE_CELL
;

terminal TABLE_CELL:
	'|' !('|' | '\n' | '\r')*
;

// --------------------------------------
// Text Literals
// --------------------------------------

/**
 * 
 */
RawText returns ecore::EString:
	Literal+
;

RawTextBlock returns ecore::EString:
	StartLiteral Literal*
	(NL StartLiteral Literal*)*
;

StartLiteral: NUMBER
	| STRING
	| WORD
	| PUNCTUATION
	| ANY_OTHER
;

Literal: NUMBER
	| STRING
//	| TAG
	| WORD
	| PUNCTUATION
	| ANY_OTHER
;

terminal TAG:
	AT (LETTER | DIGIT) (LETTER | DIGIT | '_' | '-')*
;

terminal STRING returns ecore::EString:
	'"' ('\\' ('b' | 't' | 'n' | 'f' | 'r' | 'u' | '"' | '\\') | !('\\' | '"' | '\r' | '\n'))* '"' |
	"'" ('\\' ('b' | 't' | 'n' | 'f' | 'r' | 'u' | "'" | '\\') | !('\\' | "'" | '\r' | '\n'))* "'"
;

terminal NUMBER returns ecore::EBigInteger:
	'-'? DIGIT+ '.' DIGIT* EXPONENT_PART?
	| '-'? '.' DIGIT+ EXPONENT_PART?
	| '-'? DIGIT+ EXPONENT_PART
	| '-'? DECIMAL_NUMBER
	| '-'? HEX_NUMBER
	| '-'? OCTAL_NUMBER
;

terminal fragment DECIMAL_NUMBER:
	NON_ZERO_DIGIT DIGIT*
;

terminal fragment DIGIT:
	'0' | NON_ZERO_DIGIT
;

terminal fragment NON_ZERO_DIGIT:
	'1'..'9'
;

terminal fragment HEX_NUMBER:
	'0' ('x' | 'X') ('0'..'9' | 'a'..'f' | 'A'..'F')+
;

terminal fragment OCTAL_NUMBER:
	'0' '0'..'7'*
;

terminal fragment EXPONENT_PART:
	('e' | 'E') ('+' | '-')? DIGIT+
;

terminal WORD:
	(LETTER | DIGIT)
	(LETTER | DIGIT | '_' | '-')*
;

terminal fragment LETTER:
	LATIN_ALPHABET
;

terminal fragment LATIN_ALPHABET:
	('\u0041'..'\u005A')
	| ('\u0061'..'\u007A')
;

terminal SL_COMMENT:
	'#' !('\n' | '\r')* NL
;

terminal PUNCTUATION: AT 
	| '...'
;

terminal AT: '@';

// all ascii chars other than letters, digits, space, or control codes
terminal fragment ASCII_SYMBOLS: ('\u0021'..'\u002F')
	| ('\u003A'..'\u0040')
	| ('\u005B'..'\u0060')
	| ('\u007B'..'\u007E')
;

//terminal WORD:
//	!('@' | '|' | ' ' | '\t' | '\n' | '\r')
//	!(' ' | '\t' | '\n' | '\r')*
//;

BLANK_SPACE: NL+;

terminal NL: ('\r'? '\n') | EOF;

terminal WS: (' ' | '\t');

terminal ANY_OTHER: .;
