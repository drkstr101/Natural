/*
 * generated by Xtext 2.23.0-SNAPSHOT
 */
package org.agileware.natural.lang.formatting2

import com.google.inject.Inject
import org.agileware.natural.lang.model.Document
import org.agileware.natural.lang.model.Meta
import org.agileware.natural.lang.model.NaturalModel
import org.agileware.natural.lang.model.Section
import org.agileware.natural.lang.model.Tag
import org.agileware.natural.lang.services.NaturalGrammarAccess
import org.eclipse.xtext.formatting2.AbstractFormatter2
import org.eclipse.xtext.formatting2.IFormattableDocument

class NaturalFormatter extends AbstractFormatter2 {

	@Inject extension NaturalGrammarAccess naturalGrammarAccess

	// @Inject NaturalTextFormatter.Factory textFormatterFactory
	def dispatch void format(NaturalModel model, extension IFormattableDocument doc) {
		println(textRegionAccess)
		model.document.format()
		println(doc)
	}

	def dispatch void format(Document model, extension IFormattableDocument doc) {
		// val textFormatter = textFormatterFactory.create(request.textRegionAccess, naturalGrammarAccess)
		// Format meta tags
		model.meta.format()

		// Format title
		// textFormatter.formatText(model, documentAccess.titleAssignment_3, doc)
		// Format narrative
		// textFormatter.formatMultilineText(model, documentAccess.narrativeAssignment_5_1, doc)
		// Format sections
		for (s : model.sections) {
			s.format()
		}
	}

	def dispatch void format(Section model, extension IFormattableDocument doc) {
		// val textFormatter = textFormatterFactory.create(request.textRegionAccess, naturalGrammarAccess)
		// Format meta tags
		model.meta.format()

	// Format title
	// textFormatter.formatText(model, sectionAccess.titleAssignment_3, doc)
	// Format narrative
	// textFormatter.formatMultilineText(model, sectionAccess.narrativeAssignment_5_1, doc)
	}

	def dispatch void format(Meta model, extension IFormattableDocument doc) {
		for (t : model.tags) {
			t.format()
		}
	}

	def dispatch void format(Tag model, extension IFormattableDocument doc) {
		// TODO...
	}
}
