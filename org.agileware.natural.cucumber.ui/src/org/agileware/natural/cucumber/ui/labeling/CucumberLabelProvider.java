/*
 * generated by Xtext 2.21.0
 */
package org.agileware.natural.cucumber.ui.labeling;

import org.agileware.natural.cucumber.cucumber.Background;
import org.agileware.natural.cucumber.cucumber.DocString;
import org.agileware.natural.cucumber.cucumber.Example;
import org.agileware.natural.cucumber.cucumber.Feature;
import org.agileware.natural.cucumber.cucumber.Meta;
import org.agileware.natural.cucumber.cucumber.MetaTag;
import org.agileware.natural.cucumber.cucumber.Scenario;
import org.agileware.natural.cucumber.cucumber.ScenarioOutline;
import org.agileware.natural.cucumber.cucumber.Step;
import org.agileware.natural.cucumber.cucumber.Table;
import org.eclipse.emf.edit.ui.provider.AdapterFactoryLabelProvider;
import org.eclipse.xtext.ui.label.DefaultEObjectLabelProvider;

import com.google.inject.Inject;

/**
 * Provides labels for EObjects.
 * 
 * See
 * https://www.eclipse.org/Xtext/documentation/310_eclipse_support.html#label-provider
 */
public class CucumberLabelProvider extends DefaultEObjectLabelProvider {

	@Inject
	public CucumberLabelProvider(AdapterFactoryLabelProvider delegate) {
		super(delegate);
	}

	String text(Feature model) {
		return model.getTitle().getValue() == null ? "Feature" : model.getTitle().getValue();
	}

	String image(Feature model) {
		return "feature.png";
	}

	String text(Background model) {
		return model.getTitle().getValue() == null ? "Background" : model.getTitle().getValue();
	}

	String image(Background model) {
		return "background.gif";
	}

	String text(Scenario model) {
		return model.getTitle().getValue() == null ? "Scenario" : model.getTitle().getValue();
	}

	String image(Scenario model) {
		return "scenario.png";
	}

	String text(ScenarioOutline model) {
		return model.getTitle().getValue() == null ? "Scenario Outline" : model.getTitle().getValue();
	}

	String image(ScenarioOutline model) {
		return "scenario_outline.png";
	}

	String text(Step model) {
		return merge(model.getKeyword(), " ", model.getDescription().trim());
	}

	String image(Step model) {
		return "step.gif";
	}

	String text(Table model) {
		return merge("Table of ", String.valueOf(model.getRows().size()), " rows");
	}

	String image(Table model) {
		return "table.gif";
	}

	String text(DocString model) {
		return "DocString";
	}

	String image(DocString model) {
		return "code.gif";
	}

	String text(Example model) {
		return model.getTitle().getValue() == null ? "Examples" : model.getTitle().getValue();
	}

	String image(Example model) {
		return "example.gif";
	}

	String text(Meta model) {
		return "Meta";
	}

	String text(MetaTag model) {
		return model.getKey();
	}

	String image(MetaTag model) {
		return "annotation.gif";
	}

	private static String merge(String... strings) {
		StringBuilder builder = new StringBuilder();
		for (String string : strings) {
			builder.append(string);
		}
		return builder.toString();
	}
}
